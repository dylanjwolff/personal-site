# For now, will maintain two Dockerfiles for different architectures, though I
# should eventually write a template so they can be generated from a single
# source

# Using multistage build for a clean, repeatable build environment
# Don't need to have this be ARM because we are building JS
FROM node:alpine AS builder
RUN apk update
RUN apk add make

RUN npm install -g uglify-js

# Install Elm
RUN wget https://github.com/elm/compiler/releases/download/0.19.0/binary-for-linux-64-bit.gz
RUN gunzip -c binary-for-linux-64-bit.gz > elm
RUN mv elm /usr/bin/
RUN chmod a+x /usr/bin/elm

COPY makefile ./
COPY elm.json ./
RUN mkdir src
COPY src src

RUN make optimize

# -------------------------------------------------------------------------

FROM arm32v7/nginx:latest

# Need QEMU to build ARM on x86_64 laptop
# Theoretically, for production, this could be removed to trim the image size
COPY qemu-arm-static /usr/bin

# Rolling certbot into the same container, not sure if there is value to using
# docker-compose and a dedicated service
RUN apt-get update
RUN apt-get install certbot python3-certbot-nginx cron -y

ENV WORKDIR /usr/share/nginx/html
RUN mkdir -p $WORKDIR

WORKDIR $WORKDIR

COPY --from=builder build .

COPY nginx.conf /etc/nginx/nginx.conf
COPY personal-site.conf /etc/nginx/conf.d/personal-site.conf

WORKDIR /opt
COPY entrypoint.sh .
CMD ./entrypoint.sh
